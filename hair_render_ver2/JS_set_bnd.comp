#version 430

layout (local_size_x = 1, local_size_y = 1,local_size_z = 1) in;

//速度データ
layout(rgba32f, binding = 0) restrict uniform image3D data;

//uniform変数
uniform float diff;		//拡散係数
uniform float visc;		//粘性係数
uniform int resolution;	//解像度
uniform float dt;		//Δt

uniform int b;

void main()
{
	int cell = resolution - 2;

	//質点の番号に対応するテクスチャ座標を算出
	ivec3 grid_ID = ivec3(gl_GlobalInvocationID.xyz);

	vec3 vel0 = imageLoad(data,grid_ID).xyz;
	vec3 vel1 = imageLoad(data,grid_ID + ivec3(1,0,0)).xyz;
	vec3 vel2 = imageLoad(data,grid_ID + ivec3(-1,0,0)).xyz;
	vec3 vel3 = imageLoad(data,grid_ID + ivec3(0,1,0)).xyz;
	vec3 vel4 = imageLoad(data,grid_ID + ivec3(0,-1,0)).xyz;
	vec3 vel5 = imageLoad(data,grid_ID + ivec3(0,0,1)).xyz;
	vec3 vel6 = imageLoad(data,grid_ID + ivec3(0,0,-1)).xyz;
	
	float a = -1.0;
	if(b == 0){a = 0.0;}

	if(grid_ID.x == 0){vel0 = vel1 * vec3(a,1,1);}
	else if(grid_ID.x == cell){vel0 = vel2 * vec3(a,1,1);}

	if(grid_ID.y == 0){vel0 = vel3 * vec3(1,a,1);}
	else if(grid_ID.y == cell){vel0 = vel4 * vec3(1,a,1);}

	if(grid_ID.z == 0){vel0 = vel5 * vec3(1,1,a);}
	else if(grid_ID.z == cell){vel0 = vel6 * vec3(1,1,a);}

	imageStore(data, grid_ID, vec4(vel0,0.0));
}