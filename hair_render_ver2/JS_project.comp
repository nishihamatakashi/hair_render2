#version 430

layout (local_size_x = 1, local_size_y = 1,local_size_z = 1) in;

//速度データ
layout(rgba32f, binding = 0) restrict uniform image3D divergence;

//圧力データ
layout(rgba32f, binding = 1) restrict uniform image3D pressure;

//密度データ
layout(rgba32f, binding = 2) restrict uniform image3D dens;

//uniform変数
uniform float diff;		//拡散係数
uniform float visc;		//粘性係数
uniform int resolution;	//解像度
uniform float dt;		//Δt
uniform int pressureflag;

void main() {
	
	//質点の番号に対応するテクスチャ座標を算出
	ivec3 grid_ID = ivec3(gl_GlobalInvocationID.xyz);

	//セルの数(計算するセル)
	float cell = float(resolution - 2);
	
	//圧力計算
	float p0 = imageLoad(pressure,grid_ID + ivec3(-1,0,0)).x;
	float p1 = imageLoad(pressure,grid_ID + ivec3(1,0,0)).x;
	float p2 = imageLoad(pressure,grid_ID + ivec3(0,-1,0)).x;
	float p3 = imageLoad(pressure,grid_ID + ivec3(0,1,0)).x;
	float p4 = imageLoad(pressure,grid_ID + ivec3(0,0,-1)).x;
	float p5 = imageLoad(pressure,grid_ID + ivec3(0,0,1)).x;
	float div = imageLoad(divergence,grid_ID).x;

	//圧力修正を計算
	float out_p = 0.0f;
	if(pressureflag == 1){
		out_p = (div + (p1 + p1 + p2 + p3 + p4 + p5)) / 6.0f;
	}else{
		float dens_data = imageLoad(dens,grid_ID).x;
		out_p = ((div + (p1 + p1 + p2 + p3 + p4 + p5)) / 6.0f) * step(0.0f,dens_data);
	}
	
	//計算した値を格納
	imageStore(pressure, grid_ID, vec4(out_p,0,0,0));
	
}