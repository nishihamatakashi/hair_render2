#version 430

layout (local_size_x = 1, local_size_y = 1,local_size_z = 1) in;

//入出力データ
layout(rgba32f, binding = 0) restrict uniform image3D now_data;
layout(rgba32f, binding = 1) restrict uniform image3D pre_data;

//uniform変数
uniform float diff;		//拡散係数
uniform float visc;		//粘性係数
uniform int resolution;	//解像度
uniform float dt;		//Δt
uniform int b;

void main() {
	
	//質点の番号に対応するテクスチャ座標を算出
	ivec3 grid_ID = ivec3(gl_GlobalInvocationID.xyz);

	float par = diff;

	if(b == 0){par = visc;}

	if(grid_ID.x != 0 && grid_ID.y != 0 && grid_ID.z != 0 && grid_ID.x != resolution && grid_ID.y != resolution && grid_ID.z != resolution){
		//セルの数(計算するセル)
		float cell = float(resolution - 2);
		float a = dt * par * float(cell * cell * cell);
		float c = 1 + 6 * a;
		//拡散項計算
		vec3 data0 = imageLoad(pre_data,grid_ID).xyz;
		vec3 data1 = imageLoad(pre_data,grid_ID + ivec3(-1,0,0)).xyz;
		vec3 data2 = imageLoad(pre_data,grid_ID + ivec3(1,0,0)).xyz;
		vec3 data3 = imageLoad(pre_data,grid_ID + ivec3(0,-1,0)).xyz;
		vec3 data4 = imageLoad(pre_data,grid_ID + ivec3(0,1,0)).xyz;
		vec3 data5 = imageLoad(pre_data,grid_ID + ivec3(0,0,-1)).xyz;
		vec3 data6 = imageLoad(pre_data,grid_ID + ivec3(0,0,1)).xyz;

		//最終計算
		vec3 out_data = (data0 + a * (data1 + data2 + data3 + data4 + data5 + data6)) / c;
	
		//テクスチャに格納
		imageStore(now_data, grid_ID, vec4(out_data,0.0f));
	}
	
}