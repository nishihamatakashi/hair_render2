#version 430

layout (local_size_x = 1, local_size_y = 1,local_size_z = 1) in;

//速度データ
layout(rgba32f, binding = 0) restrict uniform image3D now_vel;

//ダイバージェンスデータ
layout(rgba32f, binding = 1) restrict uniform image3D out_data;


//密度データ
layout(rgba32f, binding = 2) restrict uniform image3D dens;

//uniform変数
uniform float diff;		//拡散係数
uniform float visc;		//粘性係数
uniform int resolution;	//解像度
uniform float dt;		//Δt
uniform int pressureflag;
uniform float vdiv;

void main() {
	
	//質点の番号に対応するテクスチャ座標を算出
	ivec3 grid_ID = ivec3(gl_GlobalInvocationID.xyz);

	//セルの数(計算するセル)
	float cell = float(resolution - 2);
	
	//ダイバージェンス計算
	float dvx = imageLoad(now_vel,grid_ID + ivec3(1,0,0)).x - imageLoad(now_vel,grid_ID + ivec3(-1,0,0)).x; 
	float dvy = imageLoad(now_vel,grid_ID + ivec3(0,1,0)).y - imageLoad(now_vel,grid_ID + ivec3(0,-1,0)).y;
	float dvz = imageLoad(now_vel,grid_ID + ivec3(0,0,1)).z - imageLoad(now_vel,grid_ID + ivec3(0,0,-1)).z;
	float h = 0.5f * 1 / cell;

	float div = 0.0f;
	if (pressureflag == 1) {
		//ダイバージェンス計算
		div = -h * (dvx + dvy + dvz);
	}else
	{
		float dens_data = imageLoad(dens,grid_ID).x;
		div = (-h * (dvx + dvy + dvz) + vdiv) * step(0.0f,dens_data);
	}
	//計算した値を格納
	imageStore(out_data, grid_ID, vec4(div,0,0,0));
}